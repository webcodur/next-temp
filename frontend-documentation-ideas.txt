==================================================
프론트엔드 문서화/프롬프트 관리 시스템 아이디어
==================================================

## 1. 프로젝트 구조 표준화

### 디렉토리 구조 템플릿
- Next.js App Router 표준 구조
- 기능별 모듈화 가이드라인
- 컴포넌트 분류 체계 (ui/layout/view/feature)
- hooks/utils/lib 구분 기준
- 테스트 파일 위치 규칙

### 네이밍 컨벤션 가이드
- 파일명 규칙 (kebab-case vs PascalCase)
- 컴포넌트명 규칙
- 타입/인터페이스명 규칙
- 상수/enum 네이밍
- API 엔드포인트 네이밍

## 2. AI 협업 최적화

### CLAUDE.md 템플릿 시스템
- 프로젝트별 커스터마이즈 가능한 템플릿
- 기술 스택별 가이드라인 모음
- 코드 스타일 규칙 자동 생성
- 금지 패턴 목록 관리

### AI 프롬프트 라이브러리
- 공통 작업별 프롬프트 템플릿
- 리팩토링 프롬프트 모음
- 디버깅 프롬프트 전략
- 성능 최적화 요청 템플릿
- 접근성 개선 프롬프트

### 컨텍스트 관리 전략
- 필수 컨텍스트 vs 선택 컨텍스트
- 토큰 효율적인 문서 구성
- 우선순위 기반 정보 제공
- 세션별 컨텍스트 관리

## 3. 컴포넌트 시스템

### 컴포넌트 카탈로그
- UI 컴포넌트 목록 및 사용법
- Props 인터페이스 문서화
- 사용 예제 코드
- Storybook 연동 가이드

### 디자인 시스템 문서화
- 색상 팔레트 정의
- 타이포그래피 시스템
- 간격 시스템 (spacing)
- 반응형 브레이크포인트
- 애니메이션 가이드라인

### 컴포넌트 패턴
- Container/Presenter 패턴
- Compound Component 패턴
- Render Props vs Hooks
- Higher-Order Components
- Context Provider 패턴

## 4. 상태 관리 가이드

### 상태 관리 전략
- 로컬 vs 전역 상태 구분
- 서버 상태 관리 (React Query/SWR)
- 클라이언트 상태 관리 (Jotai/Zustand/Redux)
- 폼 상태 관리 (React Hook Form)
- URL 상태 관리

### 데이터 플로우
- Props Drilling 해결 방안
- Context 사용 가이드라인
- 상태 정규화 전략
- 옵티미스틱 업데이트
- 캐시 관리 전략

## 5. API 통합

### API 클라이언트 설계
- Axios vs Fetch 선택 기준
- 인터셉터 구현 패턴
- 에러 핸들링 전략
- 재시도 로직
- 타임아웃 설정

### 타입 안정성
- API 응답 타입 생성 자동화
- Zod/Yup 스키마 검증
- TypeScript 제네릭 활용
- 타입 가드 함수
- DTO 변환 패턴

### 목업 데이터 시스템
- MSW (Mock Service Worker) 설정
- JSON Server 구성
- Fixture 데이터 관리
- 개발/테스트 환경 분리

## 6. 성능 최적화

### 렌더링 최적화
- React.memo 사용 가이드
- useMemo/useCallback 적용 기준
- 가상화 (Virtual Scrolling)
- Code Splitting 전략
- Lazy Loading 구현

### 번들 최적화
- Tree Shaking 가이드
- Dynamic Import 활용
- 번들 분석 도구 설정
- 폰트 최적화
- 이미지 최적화

### 네트워크 최적화
- 프리페칭 전략
- 캐싱 정책
- CDN 활용
- Service Worker 구현
- HTTP/2 Push

## 7. 개발 환경 설정

### 린팅/포매팅
- ESLint 규칙 세트
- Prettier 설정
- Husky + lint-staged
- CommitLint 규칙
- EditorConfig

### 개발 도구
- VSCode 익스텐션 추천
- Chrome DevTools 활용법
- React DevTools 가이드
- 디버깅 전략
- 성능 프로파일링

### CI/CD 파이프라인
- GitHub Actions 워크플로우
- 자동 테스트 설정
- 빌드 최적화
- 배포 자동화
- 환경변수 관리

## 8. 테스팅 전략

### 단위 테스트
- Jest 설정 및 모킹
- React Testing Library 패턴
- 커스텀 훅 테스트
- 유틸 함수 테스트
- 스냅샷 테스트

### 통합 테스트
- API 모킹 전략
- 라우팅 테스트
- 상태 관리 테스트
- 폼 검증 테스트
- 에러 바운더리 테스트

### E2E 테스트
- Playwright/Cypress 선택
- 테스트 시나리오 작성
- 페이지 객체 패턴
- 테스트 데이터 관리
- CI 통합

## 9. 접근성과 국제화

### 접근성 (A11y)
- ARIA 속성 가이드
- 키보드 네비게이션
- 스크린 리더 지원
- 색상 대비 체크
- 폼 접근성

### 국제화 (i18n)
- next-i18next 설정
- 번역 키 관리
- 동적 언어 전환
- 날짜/숫자 포맷팅
- RTL 지원

## 10. 보안 가이드라인

### 클라이언트 보안
- XSS 방지 전략
- CSRF 토큰 관리
- Content Security Policy
- 민감 정보 처리
- 인증/인가 패턴

### 환경변수 관리
- .env 파일 구조
- 시크릿 관리
- 환경별 설정 분리
- 빌드 타임 vs 런타임 변수
- 환경변수 검증

## 11. 모니터링과 로깅

### 에러 트래킹
- Sentry 통합
- 에러 바운더리 구현
- 사용자 피드백 수집
- 에러 리포팅
- 소스맵 관리

### 성능 모니터링
- Web Vitals 측정
- 사용자 행동 추적
- 실시간 모니터링
- 성능 대시보드
- 알림 설정

## 12. 마이그레이션 가이드

### 버전 업그레이드
- Next.js 마이그레이션
- React 18+ 적용
- 의존성 업데이트 전략
- Breaking Changes 대응
- 점진적 마이그레이션

### 레거시 코드 개선
- 리팩토링 우선순위
- 기술 부채 관리
- 코드 품질 지표
- 단계별 개선 계획
- 롤백 전략

## 13. 팀 협업

### 코드 리뷰
- PR 템플릿
- 리뷰 체크리스트
- 코드 리뷰 문화
- 피드백 가이드라인
- 승인 기준

### 문서화
- README 템플릿
- API 문서 자동화
- 변경사항 기록
- 아키텍처 결정 기록 (ADR)
- 온보딩 가이드

## 14. 프로젝트별 커스터마이징

### 도메인별 템플릿
- 이커머스 프로젝트
- 대시보드/어드민
- 랜딩 페이지
- SaaS 플랫폼
- 모바일 웹

### 기술 스택 조합
- Next.js + TypeScript + Tailwind
- Next.js + Material-UI
- Next.js + Chakra UI
- Next.js + Ant Design
- Next.js + Styled Components

## 15. AI 개발 워크플로우

### 페어 프로그래밍 with AI
- 작업 분담 전략
- 컨텍스트 전달 방법
- 리뷰 프로세스
- 반복 개선 사이클
- 품질 검증 단계

### 프롬프트 엔지니어링
- 명확한 요구사항 작성
- 예제 코드 제공
- 제약사항 명시
- 원하지 않는 패턴 지정
- 단계별 지시사항

==================================================
추가 고려사항
==================================================

1. 각 섹션을 별도 마크다운 파일로 분리
2. 실제 코드 예제 포함
3. 체크리스트 형식으로 변환 가능
4. VSCode 스니펫으로 export
5. Claude/Cursor 규칙으로 자동 변환
6. 프로젝트 초기화 스크립트 생성
7. 대화형 CLI 도구 개발
8. 웹 기반 문서 뷰어 제공
9. 버전 관리 및 변경 이력 추적
10. 팀별 커스터마이징 지원