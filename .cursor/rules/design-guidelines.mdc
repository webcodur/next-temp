---
alwaysApply: false
---
# 🎨 통합 디자인 시스템 가이드

아래 내용은 tsx및 css파일의 디자인을 수정할 때에만 확인한다. 그 외에는 참고할 필요가 없다

## 1. 📁 참고 파일

- **통합 스타일**: `src/styles/design-system.css`
- **전역 스타일**: `src/styles/globals.css`
- **Tailwind 설정**: `tailwind.config.js`

## 2. 🏗️ 핵심 아키텍처

- **Tailwind 4.0**: `@import 'tailwindcss'` 기반의 최신 문법 사용
- **통합 CSS**: 모든 스타일은 `src/styles/design-system.css` 파일 하나로 통합 관리
- **CSS 변수**: HSL 색상 모델 기반의 체계적인 변수 시스템
- **뉴모피즘**: 사전 정의된 클래스셋을 통한 일관된 UI 질감

## 3. 🎨 색상 시스템: 이중 매핑 원칙

### 3.1. 🎯 핵심 철학: 요소별 차별화된 매핑

다크모드는 단순히 색상을 반전시키는 것이 아니다. **요소의 역할**에 따라 서로 다른 매핑 전략을 적용하여 일관된 사용자 경험을 제공한다.

### 3.2. 레이아웃 요소: 순차 매핑 (명도 관계 유지)

- **원칙**: 라이트/다크 모드에서 시각적 계층(밝고 어두움)을 동일하게 유지한다.
- **변수**: `--surface-1` (가장 밝음), `--surface-2` (중간), `--surface-3` (가장 어두움)
- **사용**: `bg-surface-1`, `bg-surface-2`, `bg-surface-3` 클래스 사용
- **설명**: 이 방식을 통해 사용자는 두 테마에서 동일한 공간감과 깊이를 느낄 수 있다.

### 3.3. 콘텐츠 요소: 역순 매핑 (의미적 역할 유지)

- **원칙**: 텍스트, 아이콘 등 콘텐츠의 시각적 중요도를 두 테마에서 동일하게 유지한다.
- **변수**: `--foreground`, `--primary`, `--secondary`, `--accent` 등
- **사용**: `text-foreground`, `bg-primary` 등 일반적인 유틸리티 클래스 사용
- **설명**: Primary 텍스트는 항상 배경과 최고 대비를 이루어 가독성을 보장한다.

### 3.4. 10단계 그레이 스케일

모든 색상 변수는 10단계 그레이 스케일(`--gray-0` ~ `--gray-9`)을 기반으로 체계적으로 정의되었다.
상세 내용은 `src/styles/system/02-variables.css` 참고.

### 3.5. CSS 변수 사용 원칙

1. **HSL 함수 사용**: `hsl(var(--primary))`
2. **투명도 슬래시 표기**: `hsl(var(--background) / 0.9)`
3. **RGBA 직접 사용**: `rgba(var(--primary-rgb), 0.1)`

## 4. 📐 뉴모피즘 시스템

### 4.1. 기본 패턴

- `.neu-flat`: 평면 - 기본 컨테이너, 패널
- `.neu-raised`: 양각 - 기본 버튼, 클릭 가능한 요소
- `.neu-elevated`: 양각 - 항상 양각 상태이며 기타 사항은 raised와 동일
- `.neu-inset`: 음각 - 활성/선택된 상태

### 4.2. 아이콘 상태

- `.neu-icon-inactive`: 비활성 아이콘 (회색)
- `.neu-icon-active`: 활성 아이콘 (primary + drop-shadow)

### 4.3. 보조 클래스

- `.neu-hover`: 호버 시 inset 효과
- `.neu-flat-focus`: 드롭다운 열릴 때 포커스 유지
- `.sidebar-container`: 사이드바 전용 (hover 효과 없는 컨테이너)

## 5. 🎭 애니메이션 시스템

### 5.1. 기본 애니메이션

- `.animate-fadeIn`: 페이드인 + 슬라이드업
- `.animate-slide-down`: Radix Collapsible용
- `.animate-slide-up`: Radix Collapsible용

### 5.2. 트랜지션 원칙

- **모든 상태 변화**: `transition: all 0.15s ease-in-out`
- **호버 효과**: 즉각적인 변화 (사용자 규칙)
- **GPU 가속**: `transform` 속성 우선 사용

## 6. 🔧 핵심 사용 규칙 및 패턴

### 6.1. 컨테이너 스타일링

일반 컨테이너는 `neu-flat`을 사용하고, 사이드바처럼 호버 효과가 필요 없는 안정적인 컨테이너는 `sidebar-container`를 사용한다.

```jsx
// ✅ 올바른 방식
<div className="neu-flat p-6 rounded-lg">모든 컨테이너, 패널, 카드</div>
<aside className="sidebar-container">사이드바</aside>
```

### 6.2. 버튼 및 아이콘 상태

상태에 따라 `neu-raised`와 `neu-inset`을, 아이콘에는 `neu-icon-active`와 `neu-icon-inactive`를 사용한다.

```jsx
<button className={isActive ? 'neu-inset' : 'neu-raised'}>상태별 버튼</button>
<Icon className={isActive ? 'neu-icon-active' : 'neu-icon-inactive'} />
```

### 6.3. 조건부 스타일링 패턴

삼항 연산자를 활용하여 조건부 스타일을 간결하게 적용한다.

```jsx
const buttonClass = isSelected
	? 'neu-inset text-primary'
	: 'neu-raised hover:scale-[1.01]';
```

### 6.4. 라이브러리 통합

Radix UI, Framer Motion 등 외부 라이브러리 컴포넌트에 직접 뉴모피즘 및 애니메이션 클래스를 적용한다.

```jsx
<RadixDialog.Content className="neu-flat p-6 animate-fadeIn">
	<RadixDialog.Title className="neu-icon-active">제목</RadixDialog.Title>
</RadixDialog.Content>
```

## 7. 📦 활용 가능한 라이브러리

- **framer-motion**: 고급 애니메이션, 제스처
- **@dnd-kit/core**: 드래그 앤 드롭
- **@radix-ui/react-\***: 접근성 기반 UI 프리미티브
- **lucide-react**: 아이콘 시스템
- **sonner**: 토스트 알림
- **@tanstack/react-table**: 데이터 그리드
- **recharts**: 차트
- **@tinymce/tinymce-react**: 리치 텍스트 에디터
- **react-hook-form**: 폼 상태 관리
- **zod**: 스키마 검증
- **jotai**: 원자적 상태 관리
- **clsx**, **tailwind-merge**: CSS 클래스 유틸리티

## 8. ⚠️ 금지 사항

1. **커스텀 `box-shadow` 작성 금지** - 뉴모피즘 클래스만 사용
2. **하드코딩 색상 금지** - CSS 변수 우선
3. **커스텀 `transition` 금지** - 기본 제공 사용
4. `neu-*` 클래스 조합 금지 - 각각 독립적 사용
5. **컨테이너에 `hover` 효과 직접 적용 금지** - 필요시 `neu-hover` 보조 클래스 사용
