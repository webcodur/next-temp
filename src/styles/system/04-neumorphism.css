/* #region 4. 뉴모피즘 시스템 - 클래스별 분할 구조 */

/*
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎨 뉴모피즘 시스템 - 클래스별 분할 관리

📚 상세 문서: docs/neumorphism-system.md

📋 분할된 파일 구조
┌─ neu-flat.css         │ 📦 평면 컨테이너 (neu-flat, neu-flat-*)
├─ neu-raised.css       │ 🔘 양각 버튼 (neu-raised, neu-raised-*)
├─ neu-elevated.css     │ 📋 고정 패널 (neu-elevated)
├─ neu-inset.css        │ ⚡ 음각 상태 (neu-inset, neu-inset-shadow)
├─ neu-icons.css        │ 🎯 아이콘 (neu-icon-active, neu-icon-inactive)
├─ neu-utilities.css    │ ⚡ 유틸리티 (neu-hover)
└─ neu-specials.css     │ 🔧 특수 목적 (sidebar-container)

🎯 클래스별 분할의 장점:
- 개발자 직관성: neu-flat 수정 → neu-flat.css
- 완전한 컨텍스트: 모든 상태가 한 파일에 (기본, hover, focus, RTL, 브랜드)
- 적정 크기: 각 파일 60~200줄로 한 눈에 파악 가능
- 유지보수성: 클래스 추가/수정 시 한 파일만 수정

💡 90% 상황은 이 3개면 충분:
1. neu-flat     - 컨테이너, 패널 (가장 많이 사용)
2. neu-raised   - 버튼, 클릭 요소 (두 번째로 많이 사용)  
3. neu-elevated - 카드, 고정 패널 (세 번째로 많이 사용)

⚡ 개발 시나리오:
"neu-flat 호버 수정" → neu-flat.css 열기 → .neu-flat:hover 섹션
"RTL inset 문제"    → neu-inset.css 열기 → [dir='rtl'] .neu-inset 섹션
"버튼 누름 효과"    → neu-raised.css 열기 → .neu-raised:active 수정
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
*/

/* 클래스별 뉴모피즘 파일 import */
@import url('./neumorphism/neu-flat.css'); /* 📦 평면 컨테이너 */
@import url('./neumorphism/neu-raised.css'); /* 🔘 양각 버튼 */
@import url('./neumorphism/neu-elevated.css'); /* 📋 고정 패널 */
@import url('./neumorphism/neu-inset.css'); /* ⚡ 음각 상태 */
@import url('./neumorphism/neu-icons.css'); /* 🎯 아이콘 */
@import url('./neumorphism/neu-utilities.css'); /* ⚡ 유틸리티 */

/* #endregion 뉴모피즘 시스템 */
